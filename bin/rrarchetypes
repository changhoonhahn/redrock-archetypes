#!/usr/bin/env python

import os
import numpy as np
import fitsio
import argparse

from desisim.templates import ELG, LRG, BGS, STAR, WD
from desispec.interpolation import resample_flux
from desisim.archetypes import ArcheTypes
import redrock

def compute_chi2(flux):
    """Compute the chi2 between all the input spectra

    Args:
        flux (float array): Array (nSpec,nPixel) with each spectra on the same
            wavenlength grid
    Returns:
        chi2 (float array): Chi2 (nSpec,nSpec) between all spectra

    """

    nspec, npix = flux.shape

    chi2 = np.zeros((nspec, nspec))
    flux *= np.sqrt(npix/np.sum(flux**2,axis=1))[:,None]

    for ii in range(nspec):
        if ii%50==0: print('Computing chi2 matrix {} over {}'.format(ii,nspec))
        amp1 = np.sum(flux[ii]*flux,axis=1)/npix
        chi2[ii,:] = npix*(1.-amp1**2)
    np.fill_diagonal(chi2,0.)

    return chi2
def get_stars(nb,wave,seed,SDSS_stellar_templates):
    """Get the stars spectra

    Args:
        nb (int): Number of spectra
        wave (float array): Rest-Frame wavelength grid in Angstrom
    Returns:
        flux (float array): Each spectra (nSpec,nPixel) on the same
            wavenlength grid
        subtype (str array): Subtype of each spectra

    """

    def subtype_star(temp):
        if temp>30000.:
            print('ERROR: No subtype')
        elif temp>10000.:
            return 'B'
        elif temp>7500.:
            return 'A'
        elif temp>6000.:
            return 'F'
        elif temp>5200.:
            return 'G'
        elif temp>3700.:
            return 'K'
        elif temp>2400.:
            return 'M'
        else:
            print('ERROR: No subtype')

    ###
    sizeSubtype = 5
    data = {}

    ###
    data['STAR'] = {}
    data['WD:DA'] = {}
    data['WD:DB'] = {}
    data['STAR']['NB'] = int(0.5*nb)
    data['WD:DA']['NB'] = int(0.25*nb)
    data['WD:DB']['NB'] = nb-data['STAR']['NB']-data['WD:DA']['NB']

    ### Read from SDSS stellar templates
    if not SDSS_stellar_templates is None:
        h = fitsio.FITS(SDSS_stellar_templates)
        head = h[0].read_header()
        flux = h[0].read()
        import matplotlib.pyplot as plt
        w = 10.**(np.asarray(head['COEFF0'] + head['COEFF1']*np.arange(flux.shape[1])))
        for s in range(flux.shape[0]):
            subtype = head['NAME'+str(s)].replace('-','').replace('/','').replace(' ','')
            sizeSubtype = max(sizeSubtype,len(subtype))
            data[subtype] = {}
            data[subtype]['NB'] = 1
            data[subtype]['WAVE'] = w
            data[subtype]['FLUX'] = np.array([flux[s,:]])
        h.close()

    tseed = seed
    data['STAR']['FLUX'], data['STAR']['WAVE'], data['STAR']['META'] = STAR().make_templates(data['STAR']['NB'], restframe=True,seed=tseed)

    tseed = seed+data['STAR']['NB']
    data['WD:DA']['FLUX'], data['WD:DA']['WAVE'], data['WD:DA']['META'] = WD(subtype='DA').make_templates(data['WD:DA']['NB'], restframe=True,seed=tseed)

    tseed = seed+data['STAR']['NB']+data['WD:DA']['NB']
    data['WD:DB']['FLUX'], data['WD:DB']['WAVE'], data['WD:DB']['META'] = WD(subtype='DB').make_templates(data['WD:DB']['NB'], restframe=True,seed=tseed)

    ###
    nTot = np.sum([ data[k]['NB'] for k in list(data.keys()) ])

    ### On same grid
    i = 0
    flux = np.zeros((nTot, wave.size))
    subtype = np.array([''.zfill(sizeSubtype)]*nTot, dtype='S'+str(sizeSubtype))
    for k in list(data.keys()):
        for j in range(data[k]['NB']):
            if k=='STAR':
                subtype[i] = subtype_star(data[k]['META'][j]['TEFF'])
            else:
                subtype[i] = k
            flux[i] = resample_flux(wave, data[k]['WAVE'], data[k]['FLUX'][j], extrapolate=True)
            i += 1
    flux /= np.median(flux,axis=1)[:,None]

    return flux, subtype
def get_galaxies(nb,wave,seed):
    """Get the galaxy spectra

    Args:
        nb (int): Number of spectra
        wave (float array): Rest-Frame wavelength grid in Angstrom
    Returns:
        flux (float array): Each spectra (nSpec,nPixel) on the same
            wavenlength grid
        subtype (string array): Subtype of each spectra

    """

    ###
    data = {}

    ###
    data['ELG'] = {}
    data['LRG'] = {}
    data['BGS'] = {}
    data['ELG']['NB'] = int(1./3.*nb)
    data['LRG']['NB'] = int(1./3.*nb)
    data['BGS']['NB'] = nb-data['ELG']['NB']-data['LRG']['NB']

    tseed = seed
    data['ELG']['FLUX'], data['ELG']['WAVE'], data['ELG']['META'] = ELG().make_templates(data['ELG']['NB'],restframe=True,nocolorcuts=True,seed=tseed)

    tseed = seed+data['ELG']['NB']
    data['LRG']['FLUX'], data['LRG']['WAVE'], data['LRG']['META'] = LRG().make_templates(data['LRG']['NB'],restframe=True,nocolorcuts=True,seed=tseed)

    tseed = seed+data['ELG']['NB']+data['LRG']['NB']
    data['BGS']['FLUX'], data['BGS']['WAVE'], data['BGS']['META'] = BGS().make_templates(data['BGS']['NB'],restframe=True,nocolorcuts=True,seed=tseed)

    ###
    nTot = np.sum([ data[k]['NB'] for k in list(data.keys()) ])

    ### On same grid
    i = 0
    flux = np.zeros((nTot, wave.size))
    subtype = np.array(['00000']*nTot, dtype='S5')
    for k in list(data.keys()):
        for j in range(data[k]['NB']):
            subtype[i] = k
            flux[i] = resample_flux(wave, data[k]['WAVE'], data[k]['FLUX'][j])
            i += 1
    flux /= np.median(flux,axis=1)[:,None]

    return flux, subtype


if __name__ == '__main__':

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Get archetype for the given spectype')

    parser.add_argument('--spectype', type=str, default=None, required=True,
        help = "Spectype: 'STAR' or 'GALAXY'")

    parser.add_argument('--out', type=str, default=None, required=True,
        help = 'Output file name')

    parser.add_argument('--nb', type=int, default=1000, required=False,
        help = 'Number of spectra to generate')

    parser.add_argument('--chi2-thresh', type=float, default=10**2.5, required=False,
        help = 'Threshold for the chi2')

    parser.add_argument('--seed', type=int, default=1234, required=False,
        help = 'Seed for desisim.templates')

    parser.add_argument('--SDSS-stellar-templates', type=str, default=None, required=False,
        help = 'SDSS stellar templates')

    args = parser.parse_args()

    ###
    dw = 0.5
    if args.spectype=='STAR':
        wave = np.arange(3000., 11000.+dw/2., dw)
        flux, subtype = get_stars(args.nb,wave,args.seed,args.SDSS_stellar_templates)
    elif args.spectype=='GALAXY':
        wave = np.arange(3500./(1.+1.85), 11000.+dw/2., dw)
        flux, subtype = get_galaxies(args.nb,wave,args.seed)

    ###
    chi2 = compute_chi2(flux)
    Arch = ArcheTypes(chi2)
    iarch, resp, respindx = Arch.get_archetypes(chi2_thresh=args.chi2_thresh, responsibility=True)
    print('Generated {} archetypes.'.format(iarch.size))

    ###
    sort = resp.argsort()[::-1]
    resp = resp[sort]/resp.sum()
    subtype = (subtype[iarch])[sort]
    flux = (flux[iarch,:])[sort]
    flux /= np.median(flux,axis=1)[:,None]

    ###
    header = [
    {'name':'CRVAL1','value':wave[0],'comment':'Rest-Frame starting wavelength [Angstroms]'},
    {'name':'CDELT1','value':dw,'comment':'Rest-Frame wavelength step'},
    {'name':'LOGLAM','value':False,'comment':'Wavelength in log lambda'},
    {'name':'RRTYPE','value':args.spectype,'comment':'Spectral type'},
    {'name':'INSPEC','value':os.environ['DESI_BASIS_TEMPLATES'],'comment':'Vector basis'},
    {'name':'RRVER','value':redrock.__version__,'comment':'Redrock version'},
    {'name':'SEED','value':args.seed,'comment':'Input seed'},
    {'name':'NBINPUT','value':args.nb,'comment':'Number of generated spectra'},
    {'name':'CHI2THRE','value':args.chi2_thresh,'comment':'Chi2 Threshold'},
    ]
    out = fitsio.FITS(args.out,'rw',clobber=True)
    out.write([flux.astype('float32'),resp.astype('float32'),subtype],names=['ARCHETYPE','RESP','SUBTYPE'],extname='ARCHETYPES',header=header)
    out.close()
